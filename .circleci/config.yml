version: '2.1'
orbs:
  python: circleci/python@1.1.0
jobs:
description: >
  Simple drop-in job to setup a python project, run tests and store the test
  results if possible.

  If test-tool is pytest, the job assumes the project defines pytest in the
  dependency file.

  Otherwise, use the built in unittest module as the test-tool.
executor:
  name: default
  tag: << parameters.version >>
parameters:
  app-dir:
    default: ~/project
    description: >-
      Path to the directory containing your python project. Not needed if
      dependency file lives in the root.
    type: string
  args:
    default: ''
    description: >-
      Arguments to pass to install command for pipenv and poetry. Override '-r
      requirements.txt' for pip.
    type: string
  cache-version:
    default: v1
    description: >-
      Change the default cache version if you need to clear the cache for any
      reason.
    type: string
  ensure-test-tool:
    default: true
    description: >
      If true, a step will be ran to ensure the configured test tool is
      installed.
    type: boolean
  fail-if-missing-tool:
    default: false
    description: >
      If true, this job will fail if the test tool was not found. If false, it
      will automatically install to recover.
    type: boolean
  include-branch-in-cache-key:
    default: true
    description: |
      If true, this cache bucket will only apply to jobs within the same branch.
    type: boolean
  include-python-in-cache-key:
    default: true
    description: >
      If true, this cache bucket will checksum the pyenv python version with the
      cache-key
    type: boolean
  module-src-dir:
    default: src
    description: Path relative to app-dir which contains module source.
    type: string
  pip-dependency-file:
    default: requirements.txt
    description: >-
      Name of the requirements file that needs to be installed with pip.
      Prepended with `app-dir`. If using pipenv or poetry, this is ignored.
    type: string
  pkg-manager:
    default: auto
    description: Select the package manager to use. Default is pip
    enum:
      - auto
      - pip
      - pipenv
      - poetry
      - pip-dist
    type: enum
  pre-install-steps:
    default: []
    description: |
      Steps needed between restoring the cache and the install step.
    type: steps
  pypi-cache:
    default: true
    description: >-
      Keep all versions of pypi and site-package caches for faster rebuilding
      overall.
    type: boolean
  setup:
    default: []
    description: >-
      Provide any optional steps you would like to run prior to install the
      python project.
    type: steps
  setup-file-path:
    default: ''
    description: Path to the setup.py file.
    type: string
  test-tool:
    default: pytest
    description: The tool to run the tests with.
    enum:
      - pytest
      - unittest
    type: enum
  test-tool-args:
    default: ''
    description: >-
      Arguments to pass to test tool, i.e. discovery settings for unittest -
      'discover -s tests_dir'.
    type: string
  venv-cache:
    default: true
    description: >-
      Use the lockfile to cache the virtualenv. Not used with pip as
      pkg-manager.
    type: boolean
  version:
    default: '3.8'
    description: >
      A full version tag must be specified. Example: "3.8"

      For a full list of releases, see the following:
      https://hub.docker.com/r/cimg/python
    type: string
steps:
  - checkout
  - steps: << parameters.setup >>
  - install-packages:
      app-dir: <<parameters.app-dir>>
      args: <<parameters.args>>
      cache-version: <<parameters.cache-version>>
      include-branch-in-cache-key: <<parameters.include-branch-in-cache-key>>
      include-python-in-cache-key: <<parameters.include-python-in-cache-key>>
      pip-dependency-file: <<parameters.pip-dependency-file>>
      pkg-manager: <<parameters.pkg-manager>>
      pre-install-steps: <<parameters.pre-install-steps>>
      pypi-cache: <<parameters.pypi-cache>>
      venv-cache: <<parameters.venv-cache>>
  - when:
      condition: <<parameters.ensure-test-tool>>
      steps:
        - run:
            command: >-
              # shellcheck source=detect-env.sh

              source "$AUTO_DETECT_ENV_SCRIPT"


              case ${DETECT_PKG_MNGR:-${PARAM_PKG_MNGR}} in
                  pip)
                      REQUIREMENTS_PATH=${PARAM_REQUIREMENTS_PATH:-requirements.txt}
                  ;;
                  pip-dist)
                      REQUIREMENTS_PATH="requirements.txt"
                  ;;
                  pipenv) # TODO: use PIPENV_PIPFILE
                      REQUIREMENTS_PATH="Pipfile"
                      PYTHON_ENV_TOOL="pipenv"
                  ;;
                  poetry)
                      PYTHON_INSTALL_ARGS="--no-ansi"
                      REQUIREMENTS_PATH="pyproject.toml"
                      PYTHON_ENV_TOOL="poetry"
                  ;;
              esac


              if [ -f ${REQUIREMENTS_PATH} ]; then
                  echo "INFO: Detected dependency file: $REQUIREMENTS_PATH"
              else
                  echo "WARNING: No dependency file for ${DETECT_PKG_MNGR:-${PARAM_PKG_MNGR}} found. ${REQUIREMENTS_PATH} expected."
              fi


              # Automatically install test package. unittest is preinstalled and
              not required.

              if [ "${PARAM_TEST_TOOL}" != "unittest" ]; then
                  DETECT_TEST_TOOL=$(eval "${PYTHON_ENV_TOOL:+$PYTHON_ENV_TOOL run} pip --disable-pip-version-check list" |
                  awk 'NR > 2 && NF > 0 { print $1 }' | grep "^${PARAM_TEST_TOOL}$")

                  NOT_DETECTED=$?

                  if (( NOT_DETECTED > 0 )) && [ "${PARAM_FAIL_IF_MISSING_TOOL}" = true ]; then
                      exit $NOT_DETECTED
                  fi

                  # If the test package is not detected, install using PYTHON_INSTALL_TOOL
                  if [ -z "$DETECT_TEST_TOOL" ]; then
                      echo "INFO: Test package ${PARAM_TEST_TOOL} was not found. Installing..."
                      eval "${PYTHON_ENV_TOOL:-pip} install ${PYTHON_INSTALL_ARGS} ${PARAM_TEST_TOOL}"
                      INSTALL_RESULT=$?
                  else
                      echo "INFO: Detected test package: $DETECT_TEST_TOOL"
                  fi

                  # Exit with test package install result, or exit 0 if param fail is set to false
                  if (( NOT_DETECTED > 0 )) && [ "${PARAM_FAIL_IF_MISSING_TOOL}" = false ]; then
                      exit ${INSTALL_RESULT:-0}
                  fi
              fi
            environment:
              PARAM_FAIL_IF_MISSING_TOOL: <<parameters.fail-if-missing-tool>>>
              PARAM_PKG_MNGR: <<parameters.pkg-manager>>
              PARAM_SETUP_FILE_PATH: <<parameters.setup-file-path>>>
              PARAM_TEST_TOOL: <<parameters.test-tool>>
            name: Ensuring test tool is installed
            working_directory: <<parameters.app-dir>>
  - when:
      condition:
        equal:
          - auto
          - << parameters.pkg-manager >>
      steps:
        - run:
            command: mkdir test-report
            name: Create test-report directory
            working_directory: <<parameters.app-dir>>
        - run:
            command: |-
              # shellcheck source=detect-env.sh
              source "$AUTO_DETECT_ENV_SCRIPT"

              if [ "${PARAM_TEST_TOOL}" = "pytest" ]; then
                  INSTALL_COMMAND="pytest --junit-xml=test-report/report.xml ${PARAM_TEST_TOOL_ARGS}"
              else
                  INSTALL_COMMAND="python -m unittest ${PARAM_TEST_TOOL_ARGS}"
              fi

              if [ -n "${PYTHON_ENV_TOOL}" ]; then
                  eval "${PYTHON_ENV_TOOL} run ${INSTALL_COMMAND}"
              else
                  eval "${INSTALL_COMMAND}"
              fi
            environment:
              PARAM_PKG_MNGR: <<parameters.pkg-manager>>
              PARAM_TEST_TOOL: <<parameters.test-tool>>
              PARAM_TEST_TOOL_ARGS: <<parameters.test-tool-args>>
              PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
            name: Run tests with auto-detected packages run
            working_directory: <<parameters.app-dir>>
        - store_test_results:
            path: >-
              <<#parameters.app-dir>><<parameters.app-dir>>/<</parameters.app-dir>>test-report
  - when:
      condition:
        and:
          - equal:
              - unittest
              - << parameters.test-tool >>
          - not:
              equal:
                - auto
                - << parameters.pkg-manager >>
      steps:
        - when:
            condition:
              or:
                - equal:
                    - poetry
                    - << parameters.pkg-manager >>
                - equal:
                    - pipenv
                    - << parameters.pkg-manager >>
            steps:
              - run:
                  command: >-
                    <<parameters.pkg-manager>> run python -m unittest <<
                    parameters.test-tool-args >>
                  name: Run tests with <<parameters.pkg-manager>> run
        - when:
            condition:
              or:
                - equal:
                    - pip
                    - << parameters.pkg-manager >>
                - equal:
                    - pip-dist
                    - << parameters.pkg-manager >>
            steps:
              - run:
                  command: python -m unittest << parameters.test-tool-args >>
                  environment:
                    PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
                  name: Run tests with global python env
                  working_directory: <<parameters.app-dir>>
  - when:
      condition:
        and:
          - equal:
              - pytest
              - << parameters.test-tool >>
          - not:
              equal:
                - auto
                - << parameters.pkg-manager >>
      steps:
        - run:
            command: mkdir test-report
            name: Create test-report directory
            working_directory: <<parameters.app-dir>>
        - when:
            condition:
              or:
                - equal:
                    - poetry
                    - << parameters.pkg-manager >>
                - equal:
                    - pipenv
                    - << parameters.pkg-manager >>
            steps:
              - run:
                  command: >-
                    <<parameters.pkg-manager>> run pytest
                    --junit-xml=test-report/report.xml <<
                    parameters.test-tool-args >>
                  name: Run tests with <<parameters.pkg-manager>> run
                  working_directory: <<parameters.app-dir>>
        - when:
            condition:
              or:
                - equal:
                    - pip
                    - << parameters.pkg-manager >>
                - equal:
                    - pip-dist
                    - << parameters.pkg-manager >>
            steps:
              - run:
                  command: >-
                    pytest --junit-xml=test-report/report.xml <<
                    parameters.test-tool-args >>
                  environment:
                    PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
                  name: Run tests with global python env
                  working_directory: <<parameters.app-dir>>
        - store_test_results:
            path: >-
              <<#parameters.app-dir>><<parameters.app-dir>>/<</parameters.app-dir>>test-report

workflows:
  main:
    jobs:
      - build
